{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _clsx2 = _interopRequireDefault(require(\"clsx\"));\n\nvar _utils = require(\"@material-ui/utils\");\n\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\n\nvar _ButtonBase = _interopRequireDefault(require(\"../ButtonBase\"));\n\nvar _reactHelpers = require(\"../utils/reactHelpers\");\n\nvar _ListContext = _interopRequireDefault(require(\"../List/ListContext\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar styles = function styles(theme) {\n  return {\n    /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */\n    root: {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      position: 'relative',\n      textDecoration: 'none',\n      width: '100%',\n      boxSizing: 'border-box',\n      textAlign: 'left',\n      paddingTop: 8,\n      paddingBottom: 8,\n      '&$selected, &$selected:hover': {\n        backgroundColor: theme.palette.action.selected\n      }\n    },\n\n    /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */\n    container: {\n      position: 'relative'\n    },\n\n    /* Styles applied to the `component`'s `focusVisibleClassName` property if `button={true}`. */\n    focusVisible: {\n      backgroundColor: theme.palette.action.selected\n    },\n\n    /* Styles applied to the `component` element if dense. */\n    dense: {\n      paddingTop: 4,\n      paddingBottom: 4\n    },\n\n    /* Styles applied to the `component` element if `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      alignItems: 'flex-start'\n    },\n\n    /* Styles applied to the inner `component` element if `disabled={true}`. */\n    disabled: {\n      opacity: 0.5\n    },\n\n    /* Styles applied to the inner `component` element if `divider={true}`. */\n    divider: {\n      borderBottom: \"1px solid \".concat(theme.palette.divider),\n      backgroundClip: 'padding-box'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the inner `component` element if `button={true}`. */\n    button: {\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&:hover': {\n        textDecoration: 'none',\n        backgroundColor: theme.palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */\n    secondaryAction: {\n      // Add some space to avoid collision as `ListItemSecondaryAction`\n      // is absolutely positioned.\n      paddingRight: 48\n    },\n\n    /* Styles applied to the root element if `selected={true}`. */\n    selected: {}\n  };\n};\n\nexports.styles = styles;\nvar useEnhancedEffect = typeof window === 'undefined' ? _react.default.useEffect : _react.default.useLayoutEffect;\n/**\n * Uses an additional container component if `ListItemSecondaryAction` is the last child.\n */\n\nvar ListItem = _react.default.forwardRef(function ListItem(props, ref) {\n  var _clsx;\n\n  var alignItems = props.alignItems,\n      autoFocus = props.autoFocus,\n      button = props.button,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      componentProp = props.component,\n      ContainerComponent = props.ContainerComponent,\n      _props$ContainerProps = props.ContainerProps;\n  _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;\n  var ContainerClassName = _props$ContainerProps.className,\n      ContainerProps = (0, _objectWithoutProperties2.default)(_props$ContainerProps, [\"className\"]),\n      dense = props.dense,\n      disabled = props.disabled,\n      disableGutters = props.disableGutters,\n      divider = props.divider,\n      focusVisibleClassName = props.focusVisibleClassName,\n      selected = props.selected,\n      other = (0, _objectWithoutProperties2.default)(props, [\"alignItems\", \"autoFocus\", \"button\", \"children\", \"classes\", \"className\", \"component\", \"ContainerComponent\", \"ContainerProps\", \"dense\", \"disabled\", \"disableGutters\", \"divider\", \"focusVisibleClassName\", \"selected\"]);\n\n  var context = _react.default.useContext(_ListContext.default);\n\n  var childContext = {\n    dense: dense || context.dense || false,\n    alignItems: alignItems\n  };\n\n  var listItemRef = _react.default.useRef();\n\n  useEnhancedEffect(function () {\n    if (autoFocus) {\n      if (listItemRef.current) {\n        listItemRef.current.focus();\n      } else {\n        process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(false, 'Material-UI: unable to set focus to a ListItem whose component has not been rendered.') : void 0;\n      }\n    }\n  }, [autoFocus]);\n\n  var children = _react.default.Children.toArray(childrenProp);\n\n  var hasSecondaryAction = children.length && (0, _reactHelpers.isMuiElement)(children[children.length - 1], ['ListItemSecondaryAction']);\n\n  var handleOwnRef = _react.default.useCallback(function (instance) {\n    // #StrictMode ready\n    listItemRef.current = _reactDom.default.findDOMNode(instance);\n  }, []);\n\n  var handleRef = (0, _reactHelpers.useForkRef)(handleOwnRef, ref);\n  var componentProps = (0, _extends2.default)({\n    className: (0, _clsx2.default)(classes.root, (_clsx = {}, (0, _defineProperty2.default)(_clsx, classes.dense, childContext.dense), (0, _defineProperty2.default)(_clsx, classes.gutters, !disableGutters), (0, _defineProperty2.default)(_clsx, classes.divider, divider), (0, _defineProperty2.default)(_clsx, classes.disabled, disabled), (0, _defineProperty2.default)(_clsx, classes.button, button), (0, _defineProperty2.default)(_clsx, classes.alignItemsFlexStart, alignItems === 'flex-start'), (0, _defineProperty2.default)(_clsx, classes.secondaryAction, hasSecondaryAction), (0, _defineProperty2.default)(_clsx, classes.selected, selected), _clsx), className),\n    disabled: disabled\n  }, other);\n  var Component = componentProp || 'li';\n\n  if (button) {\n    componentProps.component = componentProp || 'div';\n    componentProps.focusVisibleClassName = (0, _clsx2.default)(classes.focusVisible, focusVisibleClassName);\n    Component = _ButtonBase.default;\n  }\n\n  if (hasSecondaryAction) {\n    // Use div by default.\n    Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.\n\n    if (ContainerComponent === 'li') {\n      if (Component === 'li') {\n        Component = 'div';\n      } else if (componentProps.component === 'li') {\n        componentProps.component = 'div';\n      }\n    }\n\n    return _react.default.createElement(_ListContext.default.Provider, {\n      value: childContext\n    }, _react.default.createElement(ContainerComponent, (0, _extends2.default)({\n      className: (0, _clsx2.default)(classes.container, ContainerClassName),\n      ref: handleRef\n    }, ContainerProps), _react.default.createElement(Component, componentProps, children), children.pop()));\n  }\n\n  return _react.default.createElement(_ListContext.default.Provider, {\n    value: childContext\n  }, _react.default.createElement(Component, (0, _extends2.default)({\n    ref: handleRef\n  }, componentProps), children));\n});\n\nprocess.env.NODE_ENV !== \"production\" ? ListItem.propTypes = {\n  /**\n   * Defines the `align-items` style property.\n   */\n  alignItems: _propTypes.default.oneOf(['flex-start', 'center']),\n\n  /**\n   * If `true`, the list item will be focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   */\n  autoFocus: _propTypes.default.bool,\n\n  /**\n   * If `true`, the list item will be a button (using `ButtonBase`).\n   */\n  button: _propTypes.default.bool,\n\n  /**\n   * The content of the component. If a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children: (0, _utils.chainPropTypes)(_propTypes.default.node, function (props) {\n    var children = _react.default.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)\n\n\n    var secondaryActionIndex = -1;\n\n    for (var i = children.length - 1; i >= 0; i -= 1) {\n      var child = children[i];\n\n      if ((0, _reactHelpers.isMuiElement)(child, ['ListItemSecondaryAction'])) {\n        secondaryActionIndex = i;\n        break;\n      }\n    } //  is ListItemSecondaryAction the last child of ListItem\n\n\n    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {\n      return new Error('Material-UI: you used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.\n   */\n  component: _propTypes.default.elementType,\n\n  /**\n   * The container component used when a `ListItemSecondaryAction` is the last child.\n   */\n  ContainerComponent: _propTypes.default.elementType,\n\n  /**\n   * Properties applied to the container component if used.\n   */\n  ContainerProps: _propTypes.default.object,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.\n   */\n  dense: _propTypes.default.bool,\n\n  /**\n   * If `true`, the list item will be disabled.\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: _propTypes.default.bool,\n\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   */\n  divider: _propTypes.default.bool,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: _propTypes.default.string,\n\n  /**\n   * Use to apply selected styling.\n   */\n  selected: _propTypes.default.bool\n} : void 0;\nListItem.defaultProps = {\n  alignItems: 'center',\n  button: false,\n  ContainerComponent: 'li',\n  disabled: false,\n  disableGutters: false,\n  divider: false,\n  selected: false\n};\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiListItem'\n})(ListItem);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}