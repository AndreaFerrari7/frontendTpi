{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactEventListener = _interopRequireDefault(require(\"react-event-listener\"));\n\nvar _ownerDocument = _interopRequireDefault(require(\"../utils/ownerDocument\"));\n\nvar _reactHelpers = require(\"../utils/reactHelpers\");\n\nvar _utils = require(\"@material-ui/utils\");\n\nfunction useMountedRef() {\n  var mountedRef = _react.default.useRef(false);\n\n  _react.default.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  return mountedRef;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      mouseEvent = props.mouseEvent,\n      touchEvent = props.touchEvent,\n      onClickAway = props.onClickAway;\n  var mountedRef = useMountedRef();\n\n  var movedRef = _react.default.useRef(false);\n\n  var nodeRef = _react.default.useRef(); // can be removed once we drop support for non ref forwarding class components\n\n\n  var handleOwnRef = _react.default.useCallback(function (instance) {\n    // #StrictMode ready\n    nodeRef.current = _reactDom.default.findDOMNode(instance);\n  }, []);\n\n  var handleRef = (0, _reactHelpers.useForkRef)(children.ref, handleOwnRef);\n\n  var handleClickAway = _react.default.useCallback(function (event) {\n    // Ignore events that have been `event.preventDefault()` marked.\n    if (event.defaultPrevented) {\n      return;\n    } // IE 11 support, which trigger the handleClickAway even after the unbind\n\n\n    if (!mountedRef.current) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var node = nodeRef.current; // The child might render null.\n\n    if (!node) {\n      return;\n    }\n\n    var doc = (0, _ownerDocument.default)(node);\n\n    if (doc.documentElement && doc.documentElement.contains(event.target) && !node.contains(event.target)) {\n      onClickAway(event);\n    }\n  }, [mountedRef, onClickAway]);\n\n  var handleTouchMove = _react.default.useCallback(function () {\n    movedRef.current = true;\n  }, []);\n\n  var listenerProps = {};\n\n  if (mouseEvent !== false) {\n    listenerProps[mouseEvent] = handleClickAway;\n  }\n\n  if (touchEvent !== false) {\n    listenerProps[touchEvent] = handleClickAway;\n    listenerProps.onTouchMove = handleTouchMove;\n  }\n\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.cloneElement(children, {\n    ref: handleRef\n  }), _react.default.createElement(_reactEventListener.default, (0, _extends2.default)({\n    target: \"document\"\n  }, listenerProps)));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  /**\n   * The wrapped element.\n   *\n   * ⚠️The component used as a child [must be able to hold a ref](/guides/composition/#children).\n   */\n  children: _propTypes.default.element.isRequired,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: _propTypes.default.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: _propTypes.default.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: _propTypes.default.oneOf(['onTouchStart', 'onTouchEnd', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = (0, _utils.exactProp)(ClickAwayListener.propTypes);\n}\n\nClickAwayListener.defaultProps = {\n  mouseEvent: 'onMouseUp',\n  touchEvent: 'onTouchEnd'\n};\nvar _default = ClickAwayListener;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}