{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _debounce = _interopRequireDefault(require(\"debounce\"));\n\nvar _reactHelpers = require(\"../utils/reactHelpers\"); // < 1kb payload overhead when lodash/debounce is > 3kb.\n\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nvar useEnhancedEffect = typeof window !== 'undefined' ? _react.default.useLayoutEffect : _react.default.useEffect;\nvar styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: '0'\n  }\n};\n/**\n * @ignore - internal component.\n *\n * To make public in v4+.\n */\n\nvar Textarea = _react.default.forwardRef(function Textarea(props, ref) {\n  var onChange = props.onChange,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      style = props.style,\n      value = props.value,\n      other = (0, _objectWithoutProperties2.default)(props, [\"onChange\", \"rows\", \"rowsMax\", \"style\", \"value\"]);\n\n  var _React$useRef = _react.default.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = _react.default.useRef();\n\n  var _React$useState = _react.default.useState({}),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var shadowRef = _react.default.useRef();\n\n  var handleRef = (0, _reactHelpers.useForkRef)(ref, inputRef);\n\n  var syncHeight = _react.default.useCallback(function () {\n    var input = inputRef.current;\n    var inputShallow = shadowRef.current;\n    var computedStyle = window.getComputedStyle(input);\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x'; // The height of the inner content\n\n    var innerHeight = inputShallow.scrollHeight;\n    var boxSizing = computedStyle['box-sizing']; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    var singleRowHeight = inputShallow.scrollHeight; // The height of the outer content\n\n    var outerHeight = innerHeight;\n\n    if (rows != null) {\n      outerHeight = Math.max(Number(rows) * singleRowHeight, outerHeight);\n    }\n\n    if (rowsMax != null) {\n      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    if (boxSizing === 'content-box') {\n      outerHeight -= getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    } else if (boxSizing === 'border-box') {\n      outerHeight += getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width');\n    }\n\n    setState(function (prevState) {\n      // Need a large enough different to update the height.\n      // This prevents infinite rendering loop.\n      if (innerHeight > 0 && Math.abs((prevState.innerHeight || 0) - innerHeight) > 1) {\n        return {\n          innerHeight: innerHeight,\n          outerHeight: outerHeight\n        };\n      }\n\n      return prevState;\n    });\n  }, [setState, rows, rowsMax, props.placeholder]);\n\n  _react.default.useEffect(function () {\n    var handleResize = (0, _debounce.default)(function () {\n      syncHeight();\n    }, 166); // Corresponds to 10 frames at 60 Hz.\n\n    window.addEventListener('resize', handleResize);\n    return function () {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n\n  useEnhancedEffect(function () {\n    syncHeight();\n  });\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(\"textarea\", (0, _extends2.default)({\n    value: value,\n    onChange: handleChange,\n    ref: handleRef,\n    style: (0, _extends2.default)({\n      height: state.outerHeight,\n      overflow: state.outerHeight === state.innerHeight ? 'hidden' : null\n    }, style)\n  }, other)), _react.default.createElement(\"textarea\", {\n    \"aria-hidden\": \"true\",\n    className: props.className,\n    readOnly: true,\n    ref: shadowRef,\n    tabIndex: -1,\n    style: (0, _extends2.default)({}, styles.shadow, style)\n  }));\n});\n\nprocess.env.NODE_ENV !== \"production\" ? Textarea.propTypes = {\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * @ignore\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: _propTypes.default.string,\n\n  /**\n   * Minimum umber of rows to display.\n   */\n  rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n\n  /**\n   * Maximum number of rows to display.\n   */\n  rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n\n  /**\n   * @ignore\n   */\n  style: _propTypes.default.object,\n\n  /**\n   * @ignore\n   */\n  value: _propTypes.default.any\n} : void 0;\nvar _default = Textarea;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}