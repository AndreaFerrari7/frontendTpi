{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _FormGroup = _interopRequireDefault(require(\"../FormGroup\"));\n\nvar _reactHelpers = require(\"../utils/reactHelpers\");\n\nvar _RadioGroupContext = _interopRequireDefault(require(\"./RadioGroupContext\")); // @inheritedComponent FormGroup\n\n\nvar RadioGroup = _react.default.forwardRef(function RadioGroup(props, ref) {\n  var actions = props.actions,\n      children = props.children,\n      name = props.name,\n      valueProp = props.value,\n      onChange = props.onChange,\n      other = (0, _objectWithoutProperties2.default)(props, [\"actions\", \"children\", \"name\", \"value\", \"onChange\"]);\n\n  var rootRef = _react.default.useRef();\n\n  var _React$useRef = _react.default.useRef(props.value != null),\n      isControlled = _React$useRef.current;\n\n  var _React$useState = _react.default.useState(function () {\n    if (!isControlled) {\n      return props.defaultValue;\n    }\n\n    return null;\n  }),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      valueState = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  _react.default.useImperativeHandle(actions, function () {\n    return {\n      focus: function focus() {\n        var input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n        if (!input) {\n          input = rootRef.current.querySelector('input:not(:disabled)');\n        }\n\n        if (input) {\n          input.focus();\n        }\n      }\n    };\n  }, []);\n\n  _react.default.useEffect(function () {\n    process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(isControlled === (valueProp != null), [\"Material-UI: A component is changing \".concat(isControlled ? 'a ' : 'an un', \"controlled RadioGroup to be \").concat(isControlled ? 'un' : '', \"controlled.\"), 'Input elements should not switch from uncontrolled to controlled (or vice versa).', 'Decide between using a controlled or uncontrolled RadioGroup ' + 'element for the lifetime of the component.', 'More info: https://fb.me/react-controlled-components'].join('\\n')) : void 0;\n  }, [valueProp, isControlled]);\n\n  var value = isControlled ? valueProp : valueState;\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      setValue(event.target.value);\n    }\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  var context = {\n    name: name,\n    onChange: handleChange,\n    value: value\n  };\n  var handleRef = (0, _reactHelpers.useForkRef)(ref, rootRef);\n  return _react.default.createElement(_FormGroup.default, (0, _extends2.default)({\n    role: \"radiogroup\",\n    ref: handleRef\n  }, other), _react.default.createElement(_RadioGroupContext.default.Provider, {\n    value: context\n  }, children));\n});\n\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes = {\n  /**\n   * @ignore\n   */\n  actions: _propTypes.default.shape({\n    current: _propTypes.default.object\n  }),\n\n  /**\n   * The content of the component.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * The default `input` element value, useful when not controlling the component.\n   */\n  defaultValue: _propTypes.default.any,\n\n  /**\n   * The name used to reference the value of the control.\n   */\n  name: _propTypes.default.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: _propTypes.default.func,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   * @param {string} value The `value` of the selected radio button\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: _propTypes.default.func,\n\n  /**\n   * Value of the selected radio button.\n   */\n  value: _propTypes.default.string\n} : void 0;\nvar _default = RadioGroup;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}